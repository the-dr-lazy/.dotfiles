#+title: Amygdala's DOOM Emacs Configuration
#+author: the-dr-lazy
#+options: coverpage:yes
#+startup: fold

#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src


* Personal Informations
#+begin_src emacs-lisp
(setq user-full-name "Mohammad Hasani"
user-mail-address "the-dr-lazy@pm.me")

(setq auth-sources '("~/.authinfo.gpg")
auth-source-cache-expiry nil) ; default is 7200 (2h)
#+end_src

* Doom
#+begin_src emacs-lisp :tangle "init.new.el" :noweb :no-export :comments no
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
bidi              ; (tfel ot) thgir etirw uoy gnipleh
;;chinese
;;japanese
;;layout            ; auie,ctsrnm is the superior home row

:completion
(company           ; the ultimate code completion backend
+childframe
+tng)
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
;;ivy               ; a search engine for love and life
(vertico           ; the search engine of the future
+icons)

:ui
;;deft              ; notational velocity for Emacs
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode)  ; 🙂
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
indent-guides     ; highlighted indent columns
(ligatures
+extra)         ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline          ; snazzy, Atom-inspired modeline, plus API
nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints           ; highlight the region an operation acts on
(popup            ; tame sudden yet inevitable temporary windows
+all
+defaults)
;;tabs              ; a tab bar for Emacs
(treemacs          ; a project drawer, like neotree but cooler
+lsp)
unicode           ; extended unicode support for various languages
(vc-gutter +pretty) ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
(window-select     ; visually switch windows
+numbers)
workspaces        ; tab emulation, persistence & separate workspaces
zen               ; distraction-free coding or writing

:editor
(evil +everywhere); come to the dark side, we have cookies
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
(format           ; automated prettiness
+onsave)
;;god               ; run Emacs commands without modifier keys
lispy             ; vim for lisp, for people who don't like vim
multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
parinfer          ; turn lisp into python, sort of
rotate-text       ; cycle region at point between text candidates
snippets          ; my elves. They type so I don't have to
;; word-wrap         ; soft wrapping with language-aware indent

:emacs
(dired             ; making dired pretty [functional]
+icons)
electric          ; smarter, keyword-based electric-indent
(ibuffer         ; interactive buffer management
+icons)
undo              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree

:term
;;eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm             ; the best terminal emulation in Emacs

:checkers
syntax              ; tasing you for every semicolon you forget
(spell ; tasing you for misspelling mispelling
+aspell
+everywhere
+flyspell)
grammar           ; tasing grammar mistake every you make

:tools
;;ansible
biblio            ; Writes a PhD for you (citation needed)
(debugger          ; FIXME stepping through code, to help you add bugs
+lsp)
direnv
(docker
+lsp)
editorconfig      ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval     ; run code, run (also, repls)
+overlay)
;;gist              ; interacting with github gists
(lookup              ; navigate your code and its documentation
+dictionary
+docsets)
lsp               ; M-x vscode
(magit             ; a git porcelain for Emacs
+forge)
;; make              ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf               ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
rgb               ; creating color strings
taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
tree-sitter       ; syntax and parsing, sitting in a tree...
;;upload            ; map local to remote projects via ssh/ftp

:os
(:if IS-MAC macos)  ; improve compatibility with macOS
;; tty               ; improve the terminal Emacs experience

:lang
(agda              ; types of types of types of types...
+local
+tree-sitter)
;;beancount         ; mind the GAAP
(cc         ; C > C++ == 1
+lsp
+tree-sitter)
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
data              ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
dhall
;;elixir            ; erlang done right
(elm               ; care for a cup of TEA?
+lsp
+tree-sitter)
emacs-lisp        ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
(ess               ; emacs speaks statistics
+stan)
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go +lsp)         ; the hipster dialect
(graphql    ; Give queries a REST
+lsp)
(haskell    ; a language that's lazier than I am
+lsp)
;;hy                ; readability of scheme w/ speed of python
idris             ; a language you can depend on
(json              ; At least it ain't XML
+lsp
+tree-sitter)
;;(java +lsp)       ; the poster child for carpal tunnel syndrome
(javascript        ; all(hope(abandon(ye(who(enter(here))))))
+lsp
+tree-sitter)
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
(latex             ; writing papers in Emacs has never been so fun
+lsp
+cdlatex)
;;lean              ; for folks with too much to prove
ledger            ; be audit you can be
;;lua               ; one-based indices? one-based indices
(markdown          ; writing docs for people to ignore
+grip)
;;nim               ; python + lisp at the speed of c
(nix               ; I hereby declare "nix geht mehr!"
+tree-sitter)
;;ocaml             ; an objective camel
(org               ; organize your plain life in plain text
+dragndrop
+gnuplot
+pretty
+roam2)
;;php               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
(purescript        ; javascript, but functional
+lsp)
;;python            ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme +guile)   ; a fully conniving family of lisps
(sh                ; she sells {ba,z,fi}sh shells on the C xor
+fish
+lsp
+tree-sitter)
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
(web               ; the tubes
+lsp
+tree-sitter)
(yaml              ; JSON, but readable
+lsp)
;;zig               ; C, but simpler

:email
;;(mu4e +org +gmail)
;;notmuch
;;(wanderlust +gmail)

:app
;;calendar
;;emms
;;everywhere        ; *leave* Emacs!? You must be joking
;;irc               ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought

:config
literate
(default +bindings +smartparens))
#+end_src

* Bootstrap
** Font Face
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "VictorMono Nerd Font" :size 18)
doom-big-font (font-spec :family "VictorMono Nerd Font" :size 24)
doom-variable-pitch-font (font-spec :family "Overpass" :size 19)
doom-unicode-font (font-spec :family "JuliaMono")
doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))
#+end_src

I'm persian! Unfortunately. So I have better intuition over persian fonts than =unicode-fonts=.
#+begin_src emacs-lisp
(after! unicode-fonts
(push "Farhang" (cadr (assoc "Arabic" unicode-fonts-block-font-mapping))))
;; (after! unicode-fonts
;;   (add-to-list unicode-fonts-block-font-mapping '("Arabic" . '("Farhang"))))
#+end_src

In addition to these fonts, Merriweather is used with =nov.el=, and Alegreya as a
serifed proportional font used by =mixed-pitch-mode= for =writeroom-mode= with Org
files.

Because we care about how things look let's add a check to make sure we're told
if the system doesn't have any of those fonts.
#+name: detect-missing-fonts
#+begin_src emacs-lisp :tangle no
(defvar required-fonts '("VictorMono Nerd Font" "Farhang" "Overpass" "JuliaMono" "IBM Plex Mono" "Merriweather" "Alegreya"))

(defvar available-fonts
(delete-dups (or (font-family-list)
(split-string (shell-command-to-string "fc-list : family")
"[,\n]"))))

(defvar missing-fonts
(delq nil (mapcar
(lambda (font)
(unless (delq nil (mapcar (lambda (f)
(string-match-p (format "^%s$" font) f))
available-fonts))
font))
required-fonts)))

(if missing-fonts
(pp-to-string
`(unless noninteractive
(add-hook! 'doom-init-ui-hook
(run-at-time nil nil
(lambda ()
(message "%s missing the following fonts: %s"
(propertize "Warning!" 'face '(bold warning))
(mapconcat (lambda (font)
(propertize font 'face 'font-lock-variable-name-face))
',missing-fonts
", "))
(sleep-for 0.5))))))
";; No missing fonts detected")
#+end_src

#+begin_src emacs-lisp :noweb no-export
<<detect-missing-fonts()>>
#+end_src
This way whenever fonts are missing, after Doom's UI has initialised, a warning
listing the missing fonts should appear for at least half a second.

Also, let's add some flavour to comments and keywords in the syntax.
#+begin_src emacs-lisp
(custom-set-faces!
'(font-lock-comment-face :slant italic)
'(font-lock-keyword-face :slant italic))
#+end_src

** Theme and Modeline
~doom-one~ is nice and all, but I find the ~moonlight~ variant nicer. Oh, and with the
nice selection doom provides there's no reason for me to want the defaults.
#+begin_src emacs-lisp
(setq doom-theme 'doom-moonlight)
(remove-hook 'window-setup-hook #'doom-init-theme-h)
(add-hook 'after-init-hook #'doom-init-theme-h 'append)
(delq! t custom-theme-load-path)
(after! doom-themes
(setq doom-themes-enable-bold t
doom-themes-enable-italic t))

(after! doom-modeline
(setq doom-modeline-bar-width 3
doom-modeline-buffer-file-name-style 'file-name
doom-modeline-icon t
doom-modeline-major-mode-icon t))
#+end_src

However, by default ~red~ text is used in the ~modeline~, so let's make that orange
so I don't feel like something's gone /wrong/ when editing files.
#+begin_src emacs-lisp
(custom-set-faces!
'(doom-modeline-buffer-modified :foreground "orange"))
#+end_src

** Splash Screen
Emacs can render an image as the splash screen! You know that fancy GNU head, ha? :)

#+begin_src emacs-lisp
(setq fancy-splash-image (concat doom-private-dir "media/gnu.png"))
#+end_src

Lastly, the doom dashboard "useful commands" are no longer useful to me.
So, we'll disable them and then for a particularly /clean/ look disable
the modeline and ~hl-line-mode~, then also hide the cursor.

#+begin_src emacs-lisp
(setq +doom-dashboard-functions '(doom-dashboard-widget-banner))
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src
** Ligatures
#+begin_src emacs-lisp
(setq +ligatures-extra-symbols
'(;; Functional
:lambda "λ"
:delta "∆"
:left-composition "ᗕ"
:right-composition "ᗒ"
:function "ƒ"
;; Logical
:forall "∀"
:exists "∃"
:not "¬"
:and "∧"
:or "∨"
:import "⟼"
:export "⟻"
;; Algebraic
:not-equal "≠"
;; Types
:unit "⊤"
:int "ℤ"
:void "∅"
:bool "𝔹"
:true "𝕋"
:false "𝔽"
:bottom "⊥"
;; Brand
:monarch "⋈"))
#+end_src
** Miscellaneous
Relative line numbers are fantastic for knowing how far away line numbers are,
then =ESC 12 <UP>= gets you exactly where you think.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

I'd like some slightly nicer default buffer names
#+begin_src emacs-lisp
(setq doom-fallback-buffer-name "► Doom"
+doom-dashboard-name "► Doom")
#+end_src

** Better Defaults
#+begin_src emacs-lisp
(setq-default
; take new window space from all other windows (not just current)
window-combination-resize t
; Uniquify buffer names
uniquify-buffer-name-style 'forward
; Replace yes/no prompts with y/n
use-short-answers t
; Stretch cursor to the glyph width
x-stretch-cursor t)

(setq
; Raise undo-limit to 80Mb
undo-limit 80000000
; By default while in insert all changes are one big blob. Be more granular
evil-want-fine-undo t
; Nobody likes to loose work, I certainly don't
auto-save-default t
; Unicode ellispis are nicer than "...", and also save /precious/ space
truncate-string-ellipsis "…"
; I can trust my computers ... can't I?
password-cache-expiry nil
; Don't have `point' jump around
scroll-preserve-screen-position 'always
; It's nice to maintain a little margin
scroll-margin 2)

; Replace region when inserting text
(delete-selection-mode 1)
; Iterate through CamelCase words
(global-subword-mode 1)

; Automatically update buffers
(global-auto-revert-mode t)

(setq tab-width 2)
#+end_src

Auto-customization
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
(load custom-file))
#+end_src

Window Management
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
evil-split-window-below t)
#+end_src

** Snippets
#+begin_src emacs-lisp
(yas-global-mode 1)
(add-hook! 'yas-minor-mode-hook (lambda ()
(yas-activate-extra-mode 'fundamental-mode)))
#+end_src

** LSP
#+begin_src emacs-lisp
(after! lsp-ui
(setq lsp-ui-doc-enable t
lsp-ui-doc-delay 0
lsp-ui-doc-position 'top
lsp-ui-doc-include-signature t
lsp-ui-doc-show-with-cursor t
lsp-ui-doc-show-with-mouse nil
lsp-ui-doc-max-width 89
lsp-ui-doc-max-height 8
lsp-ui-doc-border "#ffffff")
(set-face-background 'lsp-ui-doc-background "#191b2e"))

(after! lsp-mode
(setq lsp-signature-auto-activate nil
lsp-signature-render-documentation nil
lsp-eldoc-hook nil
lsp-modeline-diagnostics-scope :workspace))

(setq +lookup-open-url-fn #'+lookup-xwidget-webkit-open-url-fn)

(after! lsp-mode
(push "[/\\\\]_build\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]deps\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]cover\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]priv\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]\\.deliver\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]\\.elixir_ls\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]\\.build\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]node_modules\\'" lsp-file-watch-ignored-directories)
(setq lsp-enable-folding nil))
#+end_src
** EVIL
#+begin_quote
From the =:editor evil= module.
#+end_quote

When I want to make a substitution, I want it to be global more often than not
--- so let's make that the default.
Now, EVIL cares a fair bit about keeping compatibility with Vim's default
behaviour. I don't. There are some particular settings that I'd rather be
something else, so let's change them.
#+begin_src emacs-lisp
(after! evil
(setq evil-ex-substitute-global t     ; I like my s/../.. to by global by default
evil-move-cursor-back nil       ; Don't move the block cursor when toggling insert mode
evil-move-beyond-eol t
evil-kill-on-visual-paste nil)) ; Don't put overwritten text in the kill ring
#+end_src

EVIL by default uses =forwar-char= and =backward-char= commands which are not bidi-aware. (https://github.com/emacs-evil/evil/issues/892)
#+begin_src emacs-lisp
(setq visual-order-cursor-movement t)
(define-key evil-normal-state-map "h" 'left-char)
(define-key evil-normal-state-map "l" 'right-char)
(define-key evil-normal-state-map [left] 'left-char)
(define-key evil-normal-state-map [right] 'right-char)
(define-key evil-visual-state-map "h" 'left-char)
(define-key evil-visual-state-map "l" 'right-char)
(define-key evil-visual-state-map [left] 'left-char)
(define-key evil-visual-state-map [right] 'right-char)
#+end_src

** Indent Guides
#+begin_quote
From the =:ui indent-guides= module.
#+end_quote

Columnar indent guides are so helpful; Let's use it.
#+begin_src emacs-lisp
(setq highlight-indent-guides-method 'column)
#+end_src
** Highlight ToDos
#+begin_src emacs-lisp
(after! hl-todo
(setq hl-todo-keyword-faces '(("ToDo" warning bold)
("TODO" warning bold)

("Note" success bold)
("NOTE" success bold)

("See Note" markdown-url-face)
("SEE NOTE" markdown-url-face)

("Hack" font-lock-constant-face bold)
("HACK" font-lock-constant-face bold)

("FIXME" error bold)

("Deprecated" font-lock-doc-face bold)
("DEPRECATED" font-lock-doc-face bold)

("Bug" error bold)
("BUG" error bold)

("XXX+" font-lock-constant-face bold))))
#+end_src
** YASnippet
#+begin_src emacs-lisp
(setq yas-triggers-in-field t)
#+end_src
** GPG
#+begin_src emacs-lisp :tangle packages.el
(package! pinentry)
#+end_src

#+begin_src emacs-lisp
(setq epg-pinentry-mode 'loopback)
(pinentry-start)
#+end_src

** Auto Formatter
#+begin_src emacs-lisp :tangle packages.el
(package! apheleia)
#+end_src

#+begin_src emacs-lisp
(setq +format-on-save-enabled-modes
'(not emacs-lisp-mode  ; elisp's mechanisms are good enough
sql-mode         ; sqlformat is currently broken
tex-mode         ; latexindent is broken
latex-mode
typescript-mode
typescript-tsx-mode
tsx-mode))

;; (use-package! format-all
;;   ;; To enable format on save for most programming language buffers:
;;   ;; :hook (prog-mode . format-all-mode)
;;   :config
;;   ;; Please use the default formatters; I don't care too much.
;;   (add-hook! 'format-all-mode-hook 'format-all-ensure-formatter))


(use-package! apheleia
;; :hook ((tsx-mode . apheleia-mode)
;;        (typescript-mode . apheleia-mode)
;;        (js-mode . apheleia-mode)
;;        (json-mode . apheleia-mode)
;;        (css-mode . apheleia-mode)
;;        (scss-mode . apheleia-mode)
;;        (purescript-mode . apheleia mo))
:config
(setf (alist-get 'prettier apheleia-formatters)
'(npx "prettier" file))
(add-to-list 'apheleia-mode-alist '(rjsx-mode . prettier))
(add-to-list 'apheleia-mode-alist '(tsx-mode . prettier))
(add-to-list 'apheleia-mode-alist '(js-mode . prettier))
(add-to-list 'apheleia-mode-alist '(json-mode . prettier))
(add-to-list 'apheleia-mode-alist '(typescript-mode . prettier))
(add-to-list 'apheleia-mode-alist '(purescript-mode . purs-tidy))
(add-to-list 'apheleia-mode-alist '(scss-mode . prettier))
(add-to-list 'apheleia-mode-alist '(css-mode . prettier))
(apheleia-global-mode t))
#+end_src

** JavaScript
#+begin_src emacs-lisp :tangle packages.el
(package! rjsx-mode :disable t)
(package! js2-mode :disable t)
(package! js2-refactor :disable t)
(package! skewer-mode :disable t)

(package! tsi :recipe (:type git :host github :repo "orzechowskid/tsi.el"))
(package! tsx-mode :recipe (:type git :host github :repo "orzechowskid/tsx-mode.el"))
#+end_src

#+begin_src emacs-lisp
(use-package! tsx-mode
:mode (("\\.tsx\\'" . tsx-mode)
("\\.ts\\'" . tsx-mode))
:hook (tsx-mode . lsp!)
:hook (tsx-mode . rainbow-delimiters-mode)
;; :hook (tsx-mode . +javascript-add-npm-path-h)
:custom (tsx-mode-tsx-auto-tags  t)
:defer t
:init
(after! flycheck
(flycheck-add-mode 'javascript-eslint 'tsx-mode))

(add-hook! 'tsx-mode-hook
(defun ck/tsx-setup ()
(flycheck-select-checker 'javascript-eslint)
(flycheck-add-next-checker 'javascript-eslint 'lsp)
(pushnew! flycheck-disabled-checkers
'javascript-jshint
'tsx-tide
'jsx-tide)))

(set-electric! 'tsx-mode
:chars '(?\} ?\))
:words '("||" "&&")))

(def-project-mode! +javascript-npm-mode
:modes '(html-mode
css-mode
web-mode
markdown-mode
js-mode  ; includes js2-mode and rjsx-mode
json-mode
typescript-mode
tsx-mode
solidity-mode)
:when (locate-dominating-file default-directory "package.json")
:add-hooks '(+javascript-add-npm-path-h npm-mode))
#+end_src
** Haskell
#+begin_src emacs-lisp
(use-package! lsp-haskell
  :config
  (setq lsp-haskell-server-path "haskell-language-server-wrapper"
        lsp-haskell-liquid-on t
        lsp-haskell-formatting-provider "stylish-haskell"))

(after! projectile
  (add-to-list 'projectile-project-root-files "cabal.project"))
#+end_src
** Unpins
#+begin_src emacs-lisp :tangle packages.el
(unpin! lsp-mode)
(unpin! lsp-ui)
(unpin! rustic)
(unpin! tree-sitter)
(unpin! tree-sitter-langs)
(unpin! consult-lsp)
#+end_src
