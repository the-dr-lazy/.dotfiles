#+title: Amygdala's DOOM Emacs Configuration
#+author: the-dr-lazy
#+options: coverpage:yes
#+startup: fold

#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src


* Personal Informations
#+begin_src emacs-lisp
(setq user-full-name "Mohammad Hasani"
user-mail-address "the-dr-lazy@pm.me")

(setq auth-sources '("~/.authinfo.gpg")
auth-source-cache-expiry nil) ; default is 7200 (2h)
#+end_src

* Doom
#+begin_src emacs-lisp :tangle "init.el" :noweb :no-export :comments no
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
bidi              ; (tfel ot) thgir etirw uoy gnipleh
;;chinese
;;japanese
;;layout            ; auie,ctsrnm is the superior home row

:completion
(corfu +icons +orderless)
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
;;ivy               ; a search engine for love and life
(vertico           ; the search engine of the future
+icons)

:ui
;;deft              ; notational velocity for Emacs
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode)  ; 🙂
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
indent-guides     ; highlighted indent columns
(ligatures
+extra)         ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline          ; snazzy, Atom-inspired modeline, plus API
nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints           ; highlight the region an operation acts on
(popup            ; tame sudden yet inevitable temporary windows
+all
+defaults)
;;tabs              ; a tab bar for Emacs
(treemacs          ; a project drawer, like neotree but cooler
+lsp)
unicode           ; extended unicode support for various languages
(vc-gutter +pretty) ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
(window-select     ; visually switch windows
+numbers)
workspaces        ; tab emulation, persistence & separate workspaces
zen               ; distraction-free coding or writing

:editor
(evil +everywhere); come to the dark side, we have cookies
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
(format           ; automated prettiness
+onsave)
;;god               ; run Emacs commands without modifier keys
lispy             ; vim for lisp, for people who don't like vim
multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
rotate-text       ; cycle region at point between text candidates
snippets          ; my elves. They type so I don't have to
;; word-wrap         ; soft wrapping with language-aware indent

:emacs
(dired             ; making dired pretty [functional]
+icons)
electric          ; smarter, keyword-based electric-indent
(ibuffer         ; interactive buffer management
+icons)
undo              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree

:term
;;eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm             ; the best terminal emulation in Emacs

:checkers
syntax              ; tasing you for every semicolon you forget
;; (spell ; tasing you for misspelling mispelling
;; +aspell
;; +everywhere
;; +flyspell)
grammar           ; tasing grammar mistake every you make

:tools
;;ansible
biblio            ; Writes a PhD for you (citation needed)
(debugger          ; FIXME stepping through code, to help you add bugs
+lsp)
direnv
(docker
+lsp)
editorconfig      ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval     ; run code, run (also, repls)
+overlay)
;;gist              ; interacting with github gists
(lookup              ; navigate your code and its documentation
+dictionary
+docsets)
lsp               ; M-x vscode
(magit             ; a git porcelain for Emacs
+forge)
;; make              ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf               ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
tree-sitter       ; syntax and parsing, sitting in a tree...
;;upload            ; map local to remote projects via ssh/ftp

:os
(:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
;; tty               ; improve the terminal Emacs experience

:lang
(agda              ; types of types of types of types...
+local)
;;beancount         ; mind the GAAP
(cc         ; C > C++ == 1
+lsp)
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
data              ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
dhall
;;elixir            ; erlang done right
(elm               ; care for a cup of TEA?
+lsp)
emacs-lisp        ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
(ess               ; emacs speaks statistics
+stan)
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go +lsp)         ; the hipster dialect
(graphql    ; Give queries a REST
+lsp)
(haskell    ; a language that's lazier than I am
+lsp
+tree-sitter)
;;hy                ; readability of scheme w/ speed of python
idris             ; a language you can depend on
(json              ; At least it ain't XML
+lsp
+tree-sitter)
;;(java +lsp)       ; the poster child for carpal tunnel syndrome
;; (javascript        ; all(hope(abandon(ye(who(enter(here))))))
;; +lsp
;; +tree-sitter)
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
(latex             ; writing papers in Emacs has never been so fun
+lsp
+cdlatex)
;;lean              ; for folks with too much to prove
ledger            ; be audit you can be
;;lua               ; one-based indices? one-based indices
(markdown          ; writing docs for people to ignore
+grip)
;;nim               ; python + lisp at the speed of c
(nix
 +tree-sitter
 +lsp)               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org               ; organize your plain life in plain text
+dragndrop
+gnuplot
+pretty
+roam2)
;;php               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
(purescript        ; javascript, but functional
+lsp)
;;python            ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme +guile)   ; a fully conniving family of lisps
(sh                ; she sells {ba,z,fi}sh shells on the C xor
+fish
+lsp)
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
(web               ; the tubes
+lsp)
(yaml              ; JSON, but readable
+lsp)
;;zig               ; C, but simpler

:email
;;(mu4e +org +gmail)
;;notmuch
;;(wanderlust +gmail)

:app
;;calendar
;;emms
;;everywhere        ; *leave* Emacs!? You must be joking
;;irc               ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought

:config
literate
(default +bindings +smartparens))
#+end_src

* Bootstrap
** Font Face
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "VictorMono Nerd Font" :size 18)
doom-big-font (font-spec :family "VictorMono Nerd Font" :size 24)
doom-variable-pitch-font (font-spec :family "Overpass" :size 19)
;;doom-unicode-font (font-spec :family "JuliaMono")
doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))
#+end_src

I'm persian! Unfortunately. So I have better intuition over persian fonts than =unicode-fonts=.
#+begin_src emacs-lisp
(after! unicode-fonts
(push "Farhang" (cadr (assoc "Arabic" unicode-fonts-block-font-mapping))))
;; (after! unicode-fonts
;;   (add-to-list unicode-fonts-block-font-mapping '("Arabic" . '("Farhang"))))
#+end_src

In addition to these fonts, Merriweather is used with =nov.el=, and Alegreya as a
serifed proportional font used by =mixed-pitch-mode= for =writeroom-mode= with Org
files.

Because we care about how things look let's add a check to make sure we're told
if the system doesn't have any of those fonts.
#+name: detect-missing-fonts
#+begin_src emacs-lisp :tangle no
(defvar required-fonts '("VictorMono Nerd Font" "Farhang" "Overpass" "JuliaMono" "IBM Plex Mono" "Merriweather" "Alegreya"))

(defvar available-fonts
(delete-dups (or (font-family-list)
(split-string (shell-command-to-string "fc-list : family")
"[,\n]"))))

(defvar missing-fonts
(delq nil (mapcar
(lambda (font)
(unless (delq nil (mapcar (lambda (f)
(string-match-p (format "^%s$" font) f))
available-fonts))
font))
required-fonts)))

(if missing-fonts
(pp-to-string
`(unless noninteractive
(add-hook! 'doom-init-ui-hook
(run-at-time nil nil
(lambda ()
(message "%s missing the following fonts: %s"
(propertize "Warning!" 'face '(bold warning))
(mapconcat (lambda (font)
(propertize font 'face 'font-lock-variable-name-face))
',missing-fonts
", "))
(sleep-for 0.5))))))
";; No missing fonts detected")
#+end_src

#+begin_src emacs-lisp :noweb no-export
<<detect-missing-fonts()>>
#+end_src
This way whenever fonts are missing, after Doom's UI has initialised, a warning
listing the missing fonts should appear for at least half a second.

Also, let's add some flavour to comments and keywords in the syntax.
#+begin_src emacs-lisp
(custom-set-faces!
'(font-lock-comment-face :slant italic)
'(font-lock-keyword-face :slant italic))
#+end_src

** Theme and Modeline
~doom-one~ is nice and all, but I find the ~moonlight~ variant nicer. Oh, and with the
nice selection doom provides there's no reason for me to want the defaults.
#+begin_src emacs-lisp
(setq doom-theme 'doom-moonlight)
(remove-hook 'window-setup-hook #'doom-init-theme-h)
(add-hook 'after-init-hook #'doom-init-theme-h 'append)
(delq! t custom-theme-load-path)
(after! doom-themes
(setq doom-themes-enable-bold t
doom-themes-enable-italic t))

(after! doom-modeline
(setq doom-modeline-bar-width 3
doom-modeline-buffer-file-name-style 'file-name
doom-modeline-icon t
doom-modeline-major-mode-icon t))
#+end_src

However, by default ~red~ text is used in the ~modeline~, so let's make that orange
so I don't feel like something's gone /wrong/ when editing files.
#+begin_src emacs-lisp
(custom-set-faces!
'(doom-modeline-buffer-modified :foreground "orange"))
#+end_src

** Splash Screen
Emacs can render an image as the splash screen! You know that fancy GNU head, ha? :)

#+begin_src emacs-lisp
(setq fancy-splash-image (concat doom-private-dir "media/gnu.png"))
#+end_src

Lastly, the doom dashboard "useful commands" are no longer useful to me.
So, we'll disable them and then for a particularly /clean/ look disable
the modeline and ~hl-line-mode~, then also hide the cursor.

#+begin_src emacs-lisp
(setq +doom-dashboard-functions '(doom-dashboard-widget-banner))
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src
** Ligatures
#+begin_src emacs-lisp
(setq +ligatures-extra-symbols
'(;; Functional
:lambda "λ"
:delta "∆"
:left-composition "ᗕ"
:right-composition "ᗒ"
:function "ƒ"
;; Logical
:forall "∀"
:exists "∃"
:not "¬"
:and "∧"
:or "∨"
:import "⟼"
:export "⟻"
;; Algebraic
:not-equal "≠"
;; Types
:unit "⊤"
:int "ℤ"
:void "∅"
:bool "𝔹"
:true "𝕋"
:false "𝔽"
:bottom "⊥"
;; Brand
:monarch "⋈"))
#+end_src
** Miscellaneous
Relative line numbers are fantastic for knowing how far away line numbers are,
then =ESC 12 <UP>= gets you exactly where you think.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

I'd like some slightly nicer default buffer names
#+begin_src emacs-lisp
(setq doom-fallback-buffer-name "► Doom"
+doom-dashboard-name "► Doom")
#+end_src

** Better Defaults
#+begin_src emacs-lisp
(setq-default
; take new window space from all other windows (not just current)
window-combination-resize t
; Uniquify buffer names
uniquify-buffer-name-style 'forward
; Replace yes/no prompts with y/n
use-short-answers t
; Stretch cursor to the glyph width
x-stretch-cursor t)

(setq
; Raise undo-limit to 80Mb
undo-limit 80000000
; By default while in insert all changes are one big blob. Be more granular
evil-want-fine-undo t
; Nobody likes to loose work, I certainly don't
auto-save-default t
; Unicode ellispis are nicer than "...", and also save /precious/ space
truncate-string-ellipsis "…"
; I can trust my computers ... can't I?
password-cache-expiry nil
; Don't have `point' jump around
scroll-preserve-screen-position 'always
; It's nice to maintain a little margin
scroll-margin 2)

; Replace region when inserting text
(delete-selection-mode 1)
; Iterate through CamelCase words
(global-subword-mode 1)

; Automatically update buffers
(global-auto-revert-mode t)

(use-package! autorevert
  :config
  (setq auto-revert-use-notify t))

(setq tab-width 2)
#+end_src

Auto-customization
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
(load custom-file))
#+end_src

Window Management
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
evil-split-window-below t)
#+end_src

** Snippets
#+begin_src emacs-lisp
(yas-global-mode 1)
(add-hook! 'yas-minor-mode-hook (lambda ()
(yas-activate-extra-mode 'fundamental-mode)))
#+end_src

** LSP
#+begin_src emacs-lisp
(after! lsp-ui
(setq lsp-ui-doc-enable t
lsp-ui-doc-delay 0
lsp-ui-doc-position 'top
lsp-ui-doc-include-signature t
lsp-ui-doc-show-with-cursor t
lsp-ui-doc-show-with-mouse nil
lsp-ui-doc-max-width 89
lsp-ui-doc-max-height 8
lsp-ui-doc-border "#ffffff")
(set-face-background 'lsp-ui-doc-background "#191b2e"))

(after! lsp-mode
(setq lsp-signature-auto-activate nil
lsp-signature-render-documentation nil
lsp-eldoc-hook nil
lsp-modeline-diagnostics-scope :workspace))

(setq +lookup-open-url-fn #'+lookup-xwidget-webkit-open-url-fn)

(after! lsp-mode
(push "[/\\\\]_build\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]deps\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]cover\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]priv\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]\\.deliver\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]\\.elixir_ls\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]\\.build\\'" lsp-file-watch-ignored-directories)
(push "[/\\\\]node_modules\\'" lsp-file-watch-ignored-directories)
(setq lsp-enable-folding nil))
#+end_src
** EVIL
#+begin_quote
From the =:editor evil= module.
#+end_quote

When I want to make a substitution, I want it to be global more often than not
--- so let's make that the default.
Now, EVIL cares a fair bit about keeping compatibility with Vim's default
behaviour. I don't. There are some particular settings that I'd rather be
something else, so let's change them.
#+begin_src emacs-lisp
(after! evil
(setq evil-ex-substitute-global t     ; I like my s/../.. to by global by default
evil-move-cursor-back nil       ; Don't move the block cursor when toggling insert mode
evil-move-beyond-eol t
evil-kill-on-visual-paste nil)) ; Don't put overwritten text in the kill ring
#+end_src

EVIL by default uses =forwar-char= and =backward-char= commands which are not bidi-aware. (https://github.com/emacs-evil/evil/issues/892)
#+begin_src emacs-lisp
(setq visual-order-cursor-movement t)
(define-key evil-normal-state-map "h" 'left-char)
(define-key evil-normal-state-map "l" 'right-char)
(define-key evil-normal-state-map [left] 'left-char)
(define-key evil-normal-state-map [right] 'right-char)
(define-key evil-visual-state-map "h" 'left-char)
(define-key evil-visual-state-map "l" 'right-char)
(define-key evil-visual-state-map [left] 'left-char)
(define-key evil-visual-state-map [right] 'right-char)
#+end_src

** Indent Guides
#+begin_quote
From the =:ui indent-guides= module.
#+end_quote

Columnar indent guides are so helpful; Let's use it.
#+begin_src emacs-lisp
(setq highlight-indent-guides-method 'column)
#+end_src
** Highlight ToDos
#+begin_src emacs-lisp
(after! hl-todo
(setq hl-todo-keyword-faces '(("ToDo" warning bold)
("TODO" warning bold)

("Note" success bold)
("NOTE" success bold)

("See Note" markdown-url-face)
("SEE NOTE" markdown-url-face)

("Hack" font-lock-constant-face bold)
("HACK" font-lock-constant-face bold)

("FIXME" error bold)

("Deprecated" font-lock-doc-face bold)
("DEPRECATED" font-lock-doc-face bold)

("Bug" error bold)
("BUG" error bold)

("XXX+" font-lock-constant-face bold))))
#+end_src
** YASnippet
#+begin_src emacs-lisp
(setq yas-triggers-in-field t)
#+end_src
** GPG
#+begin_src emacs-lisp :tangle packages.el
;; (package! pinentry)
#+end_src

#+begin_src emacs-lisp
;; (setq epg-pinentry-mode 'loopback)
;; (pinentry-start)

(setenv "TERM" "xterm-256color")
#+end_src

** Auto Formatter
#+begin_src emacs-lisp :tangle packages.el
(package! apheleia)
#+end_src

#+begin_src emacs-lisp
;; (setq +format-on-save-enabled-modes
;; '(not emacs-lisp-mode  ; elisp's mechanisms are good enough
;; sql-mode         ; sqlformat is currently broken
;; tex-mode         ; latexindent is broken
;; latex-mode
;; typescript-mode
;; typescript-tsx-mode
;; tsx-mode))

;; (use-package! format-all
;;   ;; To enable format on save for most programming language buffers:
;;   ;; :hook (prog-mode . format-all-mode)
;;   :config
;;   ;; Please use the default formatters; I don't care too much.
;;   (add-hook! 'format-all-mode-hook 'format-all-ensure-formatter))


(use-package apheleia
  :ensure apheleia
  :diminish ""
  :defines
  apheleia-formatters
  apheleia-mode-alist
  :functions
  apheleia-global-mode
  :config
  (setf (alist-get 'prettier-json apheleia-formatters)
        '("prettier" "--stdin-filepath" filepath))
  (apheleia-global-mode +1))

;; (use-package! apheleia
;; ;; :hook ((tsx-mode . apheleia-mode)
;; ;;        (typescript-mode . apheleia-mode)
;; ;;        (js-mode . apheleia-mode)
;; ;;        (json-mode . apheleia-mode)
;; ;;        (css-mode . apheleia-mode)
;; ;;        (scss-mode . apheleia-mode)
;; ;;        (purescript-mode . apheleia mo))
;; :config
;; (setf (alist-get 'prettier apheleia-formatters)
;; '(npx "prettier" file))
;; (add-to-list 'apheleia-mode-alist '(rjsx-mode . prettier))
;; (add-to-list 'apheleia-mode-alist '(tsx-mode . prettier))
;; (add-to-list 'apheleia-mode-alist '(js-mode . prettier))
;; (add-to-list 'apheleia-mode-alist '(json-mode . prettier))
;; (add-to-list 'apheleia-mode-alist '(typescript-mode . prettier))
;; (add-to-list 'apheleia-mode-alist '(purescript-mode . purs-tidy))
;; (add-to-list 'apheleia-mode-alist '(scss-mode . prettier))
;; (add-to-list 'apheleia-mode-alist '(css-mode . prettier))
;; (apheleia-global-mode t))
#+end_src

** JavaScript
#+begin_src emacs-lisp :tangle packages.el

(package! typescript-mode :disable t)
(package! treesit-auto)

(package! lsp-tailwindcss :recipe (:type git :host github :repo "merrickluo/lsp-tailwindcss"))

;; (package! tsx-ts-helper-mode
;;   :recipe (:type git :repo "https://codeberg.org/ckruse/tsx-ts-helper-mode.git"))

(package! typescript-mode :disable t)
(package! rjsx-mode :disable t)
(package! js2-mode :disable t)
(package! js2-refactor :disable t)
(package! skewer-mode :disable t)

(package! tide :disable t)

#+end_src

#+begin_src emacs-lisp

 (use-package corfu
      :ensure t
      ;; Optional customizations
      :custom
      (corfu-cycle t)                 ; Allows cycling through candidates
      (corfu-auto t)                  ; Enable auto completion
      (corfu-auto-prefix 2)           ; Minimum length of prefix for completion
      (corfu-auto-delay 0)            ; No delay for completion
      (corfu-popupinfo-delay '(0.5 . 0.2))  ; Automatically update info popup after that numver of seconds
      (corfu-preview-current 'insert) ; insert previewed candidate
      (corfu-preselect 'prompt)
      (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets
      ;; Optionally use TAB for cycling, default is `corfu-complete'.
      :bind (:map corfu-map
                  ("M-SPC"      . corfu-insert-separator)
                  ("TAB"        . corfu-next)
                  ([tab]        . corfu-next)
                  ("S-TAB"      . corfu-previous)
                  ([backtab]    . corfu-previous)
                  ("S-<return>" . corfu-insert)
                  ("RET"        . corfu-insert))

      :init
      (global-corfu-mode)
      (corfu-history-mode)
      (corfu-popupinfo-mode) ; Popup completion info
      :config
      (add-hook 'eshell-mode-hook
                (lambda () (setq-local corfu-quit-at-boundary t
                                       corfu-quit-no-match t
                                       corfu-auto nil)
                  (corfu-mode))
                nil
                t))

(use-package treesit
      :mode (("\\.tsx\\'" . tsx-ts-mode)
             ("\\.js\\'"  . typescript-ts-mode)
             ("\\.mjs\\'" . typescript-ts-mode)
             ("\\.mts\\'" . typescript-ts-mode)
             ("\\.cjs\\'" . typescript-ts-mode)
             ("\\.ts\\'"  . typescript-ts-mode)
             ("\\.jsx\\'" . tsx-ts-mode)
             ("\\.json\\'" .  json-ts-mode)
             ("\\.Dockerfile\\'" . dockerfile-ts-mode)
             ("\\.prisma\\'" . prisma-ts-mode)
             ;; More modes defined here...
             )
      :preface
      (defun os/setup-install-grammars ()
        "Install Tree-sitter grammars if they are absent."
        (interactive)
        (dolist (grammar
                 '((css . ("https://github.com/tree-sitter/tree-sitter-css" "v0.20.0"))
                   (bash "https://github.com/tree-sitter/tree-sitter-bash")
                   (html . ("https://github.com/tree-sitter/tree-sitter-html" "v0.20.1"))
                   (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "v0.21.2" "src"))
                   (json . ("https://github.com/tree-sitter/tree-sitter-json" "v0.20.2"))
                   (python . ("https://github.com/tree-sitter/tree-sitter-python" "v0.20.4"))
                   (go "https://github.com/tree-sitter/tree-sitter-go" "v0.20.0")
                   (markdown "https://github.com/ikatyang/tree-sitter-markdown")
                   (make "https://github.com/alemuller/tree-sitter-make")
                   (elisp "https://github.com/Wilfred/tree-sitter-elisp")
                   (cmake "https://github.com/uyha/tree-sitter-cmake")
                   (c "https://github.com/tree-sitter/tree-sitter-c")
                   (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
                   (toml "https://github.com/tree-sitter/tree-sitter-toml")
                   (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "tsx/src"))
                   (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src"))
                   (yaml . ("https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0"))
                   (prisma "https://github.com/victorhqc/tree-sitter-prisma")))
          (add-to-list 'treesit-language-source-alist grammar)
          ;; Only install `grammar' if we don't already have it
          ;; installed. However, if you want to *update* a grammar then
          ;; this obviously prevents that from happening.
          (unless (treesit-language-available-p (car grammar))
            (treesit-install-language-grammar (car grammar)))))

      ;; Optional, but recommended. Tree-sitter enabled major modes are
      ;; distinct from their ordinary counterparts.
      ;;
      ;; You can remap major modes with `major-mode-remap-alist'. Note
      ;; that this does *not* extend to hooks! Make sure you migrate them
      ;; also
      (dolist (mapping
               '((python-mode . python-ts-mode)
                 (css-mode . css-ts-mode)
                 (typescript-mode . typescript-ts-mode)
                 (js-mode . typescript-ts-mode)
                 (js2-mode . typescript-ts-mode)
                 (c-mode . c-ts-mode)
                 (c++-mode . c++-ts-mode)
                 (c-or-c++-mode . c-or-c++-ts-mode)
                 (bash-mode . bash-ts-mode)
                 (css-mode . css-ts-mode)
                 (json-mode . json-ts-mode)
                 (js-json-mode . json-ts-mode)
                 (sh-mode . bash-ts-mode)
                 (sh-base-mode . bash-ts-mode)))
        (add-to-list 'major-mode-remap-alist mapping))
      :config
      (os/setup-install-grammars))


(use-package lsp-mode
      :diminish "LSP"
      :ensure t
      :hook ((lsp-mode . lsp-diagnostics-mode)
             (lsp-mode . lsp-enable-which-key-integration)
             ((tsx-ts-mode
               typescript-ts-mode
               js-ts-mode) . lsp-deferred))
      :custom
      (lsp-keymap-prefix "C-c l")           ; Prefix for LSP actions
      (lsp-completion-provider :none)
      (lsp-diagnostics-provider :flycheck)
      (lsp-session-file (locate-user-emacs-file ".lsp-session"))
      (lsp-log-io nil)                      ; IMPORTANT! Use only for debugging! Drastically affects performance
      (lsp-keep-workspace-alive nil)        ; Close LSP server if all project buffers are closed
      (lsp-idle-delay 0.5)                  ; Debounce timer for `after-change-function'
      ;; core
      (lsp-enable-xref t)                   ; Use xref to find references
      (lsp-auto-configure t)                ; Used to decide between current active servers
      (lsp-eldoc-enable-hover t)            ; Display signature information in the echo area
      (lsp-enable-dap-auto-configure t)     ; Debug support
      (lsp-enable-file-watchers nil)
      (lsp-enable-folding nil)              ; I disable folding since I use origami
      (lsp-enable-imenu t)
      (lsp-enable-indentation nil)          ; I use prettier
      (lsp-enable-links nil)                ; No need since we have `browse-url'
      (lsp-enable-on-type-formatting nil)   ; Prettier handles this
      (lsp-enable-suggest-server-download t) ; Useful prompt to download LSP providers
      (lsp-enable-symbol-highlighting t)     ; Shows usages of symbol at point in the current buffer
      (lsp-enable-text-document-color nil)   ; This is Treesitter's job

      (lsp-ui-sideline-show-hover nil)      ; Sideline used only for diagnostics
      (lsp-ui-sideline-diagnostic-max-lines 20) ; 20 lines since typescript errors can be quite big
      ;; completion
      (lsp-completion-enable t)
      (lsp-completion-enable-additional-text-edit t) ; Ex: auto-insert an import for a completion candidate
      (lsp-enable-snippet t)                         ; Important to provide full JSX completion
      (lsp-completion-show-kind t)                   ; Optional
      ;; headerline
      ;; (lsp-headerline-breadcrumb-enable t)  ; Optional, I like the breadcrumbs
      ;; (lsp-headerline-breadcrumb-enable-diagnostics nil) ; Don't make them red, too noisy
      ;; (lsp-headerline-breadcrumb-enable-symbol-numbers nil)
      ;; (lsp-headerline-breadcrumb-icons-enable nil)
      ;; modeline
      (lsp-modeline-code-actions-enable nil) ; Modeline should be relatively clean
      (lsp-modeline-diagnostics-enable nil)  ; Already supported through `flycheck'
      (lsp-modeline-workspace-status-enable nil) ; Modeline displays "LSP" when lsp-mode is enabled
      (lsp-signature-doc-lines 1)                ; Don't raise the echo area. It's distracting
      (lsp-ui-doc-use-childframe t)              ; Show docs for symbol at point
      ;; (lsp-eldoc-render-all nil)            ; This would be very useful if it would respect `lsp-signature-doc-lines', currently it's distracting
      ;; lens
      (lsp-lens-enable nil)                 ; Optional, I don't need it
      ;; semantic
      (lsp-semantic-tokens-enable nil)      ; Related to highlighting, and we defer to treesitter

      :preface
      (defun lsp-booster--advice-json-parse (old-fn &rest args)
  "Try to parse bytecode instead of json."
  (or
   (when (equal (following-char) ?#)
     (let ((bytecode (read (current-buffer))))
       (when (byte-code-function-p bytecode)
         (funcall bytecode))))
   (apply old-fn args)))

(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
  "Prepend emacs-lsp-booster command to lsp CMD."
  (let ((orig-result (funcall old-fn cmd test?)))
    (if (and (not test?)                             ;; for check lsp-server-present?
             (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
             lsp-use-plists
             (not (functionp 'json-rpc-connection))  ;; native json-rpc
             (executable-find "emacs-lsp-booster"))
        (progn
          (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
            (setcar orig-result command-from-exec-path))
          (message "Using emacs-lsp-booster for %s!" orig-result)
          (cons "emacs-lsp-booster" orig-result))
      orig-result)))

      :init
      (setq lsp-use-plists t)
(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)
      (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command))

(use-package lsp-completion
      :no-require
      :hook ((lsp-mode . lsp-completion-mode)))

(use-package lsp-eslint
      :demand t
      :after lsp-mode)

(use-package lsp-tailwindcss
      :init (setq lsp-tailwindcss-add-on-mode t)
      :config
      (dolist (tw-major-mode
               '(css-mode
                 css-ts-mode
                 typescript-mode
                 typescript-ts-mode
                 tsx-ts-mode
                 js2-mode
                 js-ts-mode
                 clojure-mode))
        (add-to-list 'lsp-tailwindcss-major-modes tw-major-mode)))


;;;; per https://github.com/emacs-lsp/lsp-mode#performance
(setq read-process-output-max (* 10 1024 1024)) ;; 10mb
(setq gc-cons-threshold 200000000)



    ;; (use-package lsp-ui
    ;;   :ensure t
    ;;   :commands
    ;;   (lsp-ui-doc-show
    ;;    lsp-ui-doc-glance)
    ;;   :bind (:map lsp-mode-map
    ;;               ("C-c C-d" . 'lsp-ui-doc-glance))
    ;;   :after (lsp-mode evil)
    ;;   :config (setq lsp-ui-doc-enable t
    ;;                 evil-lookup-func #'lsp-ui-doc-glance ; Makes K in evil-mode toggle the doc for symbol at point
    ;;                 ;; lsp-ui-doc-show-with-cursor nil      ; Don't show doc when cursor is over symbol - too distracting
    ;;                 lsp-ui-doc-include-signature t       ; Show signature
    ;;                 lsp-ui-doc-position 'at-point))


;; (use-package! tsx-mode
;; :mode (("\\.tsx\\'" . tsx-mode)
;; ("\\.ts\\'" . tsx-mode))
;; :hook (tsx-mode . lsp!)
;; :hook (tsx-mode . rainbow-delimiters-mode)
;; ;; :hook (tsx-mode . +javascript-add-npm-path-h)
;; :custom (tsx-mode-tsx-auto-tags  t)
;; :defer t
;; :init
;; (after! flycheck
;; (flycheck-add-mode 'javascript-eslint 'tsx-mode))

;; (add-hook! 'tsx-mode-hook
;; (defun ck/tsx-setup ()
;; (flycheck-select-checker 'javascript-eslint)
;; (flycheck-add-next-checker 'javascript-eslint 'lsp)
;; (pushnew! flycheck-disabled-checkers
;; 'javascript-jshint
;; 'tsx-tide
;; 'jsx-tide)))

;; (set-electric! 'tsx-mode
;; :chars '(?\} ?\))
;; :words '("||" "&&")))

;; (use-package! tree-sitter)
;; (use-package! tree-sitter-langs)

;; (global-tree-sitter-mode)

;; (add-hook 'tree-sitter-after-on-hook (lambda (&rest args) (ignore-errors (tree-sitter-hl-mode +1))))

;; (after! tree-sitter
;;    (pushnew! tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx))
;;    (pushnew! tree-sitter-major-mode-language-alist '(typescript-mode . typescript)))

;; (after! evil-textobj-tree-sitter
;;   (pushnew! evil-textobj-tree-sitter-major-mode-language-alist '(typescript-tsx-mode . "tsx"))
;;   (pushnew! evil-textobj-tree-sitter-major-mode-language-alist '(typescript-mode . "typescript")))

;; (define-derived-mode typescript-tsx-mode web-mode "TypeScript/TSX")

;; (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-tsx-mode))


;; (defmacro ++comment (&rest body)
;;   "Comment out one or more s-expressions."
;;   nil)

;; (setq treesit-language-source-alist
;;    '((bash "https://github.com/tree-sitter/tree-sitter-bash")
;;      (cmake "https://github.com/uyha/tree-sitter-cmake")
;;      (css "https://github.com/tree-sitter/tree-sitter-css")
;;      (elisp "https://github.com/Wilfred/tree-sitter-elisp")
;;      (java "https://github.com/tree-sitter/tree-sitter-java")
;;      (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
;;      (nix "https://github.com/nix-community/tree-sitter-nix" "master" "src")
;;      (haskell "https://github.com/tree-sitter/tree-sitter-haskell")
;;      (html "https://github.com/tree-sitter/tree-sitter-html")
;;      (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
;;      (json "https://github.com/tree-sitter/tree-sitter-json")
;;      (make "https://github.com/alemuller/tree-sitter-make")
;;      (markdown "https://github.com/ikatyang/tree-sitter-markdown")
;;      (org "https://github.com/milisims/tree-sitter-org" "master" "src")
;;      (python "https://github.com/tree-sitter/tree-sitter-python")
;;      (toml "https://github.com/tree-sitter/tree-sitter-toml")
;;      (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
;;      (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
;;      (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

;; (add-to-list 'tree-sitter-major-mode-language-alist '(tsx-ts-mode . tsx))
;; (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-ts-mode . typescript))

;; (++comment
;;  (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))
;; )

;; (use-package treesit-auto
;;   :custom
;;   (treesit-auto-install 'prompt)
;;   :config
;;   (treesit-auto-add-to-auto-mode-alist 'all)
;;   (global-treesit-auto-mode))

;; (use-package typescript-ts-mode
;;   :mode (("\\.ts\\'" . typescript-ts-mode)
;;          ("\\.tsx\\'" . tsx-ts-mode))
;;   :config
;;   (add-hook! '(typescript-ts-mode-hook tsx-ts-mode-hook) #'lsp!))

;; (add-hook! '(typescript-ts-mode-hook
;;              tsx-ts-mode-hook)
;;            #'lsp)

;; (use-package tsx-ts-helper-mode
;;   :commands (tsx-ts-helper-mode)
;;   :hook (tsx-ts-mode . tsx-ts-helper-mode))

;; (use-package! typescript-ts-mode
;;   :mode (("\\.ts\\'" . typescript-ts-mode)
;;          ("\\.tsx\\'" . tsx-ts-mode))
;;   :config
;;   (add-hook! '(typescript-ts-mode-hook
;;              tsx-ts-mode-hook)
;;            #'tree-sitter-mode)
;;   (add-hook! '(typescript-ts-mode-hook
;;              tsx-ts-mode-hook)
;;            #'lsp))

;; (setq major-mode-remap-alist
;;  '((yaml-mode . yaml-ts-mode)
;;    (bash-mode . bash-ts-mode)
;;    (js2-mode . js-ts-mode)
;;    (typescript-mode . typescript-ts-mode)
;;    (json-mode . json-ts-mode)
;;    (css-mode . css-ts-mode)
;;    (python-mode . python-ts-mode)))

;; (def-project-mode! +javascript-npm-mode
;; :modes '(html-mode
;; css-mode
;; web-mode
;; markdown-mode
;; js-mode  ; includes js2-mode and rjsx-mode
;; json-mode
;; typescript-mode
;; tsx-mode
;; solidity-mode)
;; :when (locate-dominating-file default-directory "package.json")
;; :add-hooks '(+javascript-add-npm-path-h npm-mode))
#+end_src

** Haskell
#+begin_src emacs-lisp
(use-package! lsp-haskell
  :config
  (setq lsp-haskell-server-path "haskell-language-server-wrapper"
        lsp-haskell-liquid-on t
        lsp-haskell-formatting-provider "stylish-haskell"))

(after! projectile
  (add-to-list 'projectile-project-root-files "cabal.project"))
#+end_src
** Unpins
#+begin_src emacs-lisp :tangle packages.el
;; (unpin! lsp-mode)
;; (unpin! lsp-ui)
(unpin! rustic)
(unpin! tree-sitter)
(unpin! tree-sitter-langs)
(unpin! consult-lsp)
#+end_src

** Org
#+begin_src emacs-lisp :tangle pacakges.el
(package! ox-odt
  :recipe (:host github
           :repo "kjambunathan/org-mode-ox-odt"
           :files ("lisp/ox-odt.el"
                   "lisp/odt.el"
                   "etc"
                   "docs"
                   "contrib/odt/LibreOffice")))
#+end_src

#+begin_src emacs-lisp
(setq org-cite-csl-styles-dir "~/Zotero/styles")
(setq! citar-bibliography '("~/Zotero/library.bib"))
#+end_src

** Completion
#+begin_src emacs-lisp
;; (map!
;;  :map company-active-map
;;  :gi "<return>" #'company-complete-selection
;;  :gi [return]   #'company-complete-selection
;;  :gi "RET"      #'company-complete-selection
;;  :gi "C-?"      #'company-show-doc-buffer)
#+end_src
